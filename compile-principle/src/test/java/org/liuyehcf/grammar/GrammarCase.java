package org.liuyehcf.grammar;

import org.liuyehcf.grammar.core.definition.*;

import static org.liuyehcf.grammar.core.definition.Symbol.*;

public abstract class GrammarCase {
    public static Grammar GRAMMAR_CASE_1 = Grammar.create(
            createNonTerminator("E"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("E"),
                                    createTerminator("+"),
                                    createNonTerminator("E")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("E"),
                                    createTerminator("*"),
                                    createNonTerminator("E")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createTerminator("("),
                                    createNonTerminator("E"),
                                    createTerminator(")")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createTerminator("id")
                            )
                    )
            )
    );

    public static Grammar GRAMMAR_CASE_2 = Grammar.create(
            createNonTerminator("E"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("T"),
                                    createNonTerminator("E′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E′"),
                            SymbolString.create(
                                    createTerminator("+"),
                                    createNonTerminator("T"),
                                    createNonTerminator("E′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E′"),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    createNonTerminator("F"),
                                    createNonTerminator("T′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T′"),
                            SymbolString.create(
                                    createTerminator("*"),
                                    createNonTerminator("F"),
                                    createNonTerminator("T′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T′"),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createTerminator("("),
                                    createNonTerminator("E"),
                                    createTerminator(")")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createRegexTerminator("id")
                            )
                    )
            )
    );
    public static Grammar GRAMMAR_CASE_3 = Grammar.create(
            createNonTerminator("E"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("T"),
                                    createNonTerminator("E′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E′"),
                            SymbolString.create(
                                    createTerminator("+"),
                                    createNonTerminator("T"),
                                    createNonTerminator("E′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E′"),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    createNonTerminator("F"),
                                    createNonTerminator("T′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T′"),
                            SymbolString.create(
                                    createTerminator("*"),
                                    createNonTerminator("F"),
                                    createNonTerminator("T′")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T′"),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createTerminator("("),
                                    createNonTerminator("E"),
                                    createTerminator(")")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createTerminator("id")
                            )
                    )
            )
    );
    public static Grammar GRAMMAR_CASE_5 = Grammar.create(
            createNonTerminator("A"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("a")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("a"),
                                    createTerminator("b")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("a"),
                                    createTerminator("b"),
                                    createTerminator("c")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("a"),
                                    createTerminator("b"),
                                    createTerminator("c"),
                                    createTerminator("d")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("b")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("b"),
                                    createTerminator("c")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("b"),
                                    createTerminator("c"),
                                    createTerminator("d")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("c")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("c"),
                                    createTerminator("d")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("A"),
                            SymbolString.create(
                                    createTerminator("d")
                            )
                    )
            )
    );
    public static Grammar GRAMMAR_CASE_10 = Grammar.create(
            createNonTerminator("S"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("S"),
                            SymbolString.create(
                                    createNonTerminator("B"),
                                    createNonTerminator("B")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("B"),
                            SymbolString.create(
                                    createTerminator("a"),
                                    createNonTerminator("B")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("B"),
                            SymbolString.create(
                                    createTerminator("b")
                            )
                    )
            )
    );

    public static Grammar GRAMMAR_CASE_11 = Grammar.create(
            createNonTerminator("E"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("E"),
                                    createTerminator("+"),
                                    createNonTerminator("T")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("E"),
                            SymbolString.create(
                                    createNonTerminator("T")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    createNonTerminator("T"),
                                    createTerminator("*"),
                                    createNonTerminator("F")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    createNonTerminator("F")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createTerminator("("),
                                    createNonTerminator("E"),
                                    createTerminator(")")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("F"),
                            SymbolString.create(
                                    createTerminator("id")
                            )
                    )
            )
    );


    public static Grammar GRAMMAR_CASE_12 = Grammar.create(
            createNonTerminator("T"),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    createTerminator("a"),
                                    createNonTerminator("B"),
                                    createTerminator("d")
                            )
                    )
            ), Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("T"),
                            SymbolString.create(
                                    EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("B"),
                            SymbolString.create(
                                    createNonTerminator("T"),
                                    createTerminator("b")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator("B"),
                            SymbolString.create(
                                    EPSILON
                            )
                    )
            )
    );

    private static String PROGRAM = "PROGRAM";
    private static String DECLIST = "DECLIST";
    private static String DECLISTN = "DECLISTN";
    private static String STLIST = "STLIST";
    private static String STLISTN = "STLISTN";
    private static String TYPE = "TYPE";
    public static Grammar GRAMMAR_CASE_4 = Grammar.create(
            createNonTerminator(PROGRAM),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(PROGRAM),
                            SymbolString.create(
                                    createTerminator("program"),
                                    createNonTerminator(DECLIST),
                                    createTerminator(":"),
                                    createNonTerminator(TYPE),
                                    createTerminator(";"),
                                    createNonTerminator(STLIST),
                                    createTerminator("end")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(DECLIST),
                            SymbolString.create(
                                    createTerminator("id"),
                                    createNonTerminator(DECLISTN)
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(DECLISTN),
                            SymbolString.create(
                                    createTerminator(","),
                                    createTerminator("id"),
                                    createNonTerminator(DECLISTN)
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(DECLISTN),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(STLIST),
                            SymbolString.create(
                                    createTerminator("s"),
                                    createNonTerminator(STLISTN)
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(STLISTN),
                            SymbolString.create(
                                    createTerminator(";"),
                                    createTerminator("s"),
                                    createNonTerminator(STLISTN)
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(STLISTN),
                            SymbolString.create(
                                    Symbol.EPSILON
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(TYPE),
                            SymbolString.create(
                                    createTerminator("real")
                            )
                    )
            ),
            Production.create(
                    PrimaryProduction.create(
                            createNonTerminator(TYPE),
                            SymbolString.create(
                                    createTerminator("int")
                            )
                    )
            )
    );
}
